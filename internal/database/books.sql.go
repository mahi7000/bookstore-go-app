// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: books.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addNewBook = `-- name: AddNewBook :one
INSERT INTO books (id, created_at, updated_at, name, url, description, author, book_cover)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, created_at, updated_at, name, url, description, author, book_cover
`

type AddNewBookParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Name        string
	Url         string
	Description string
	Author      string
	BookCover   string
}

func (q *Queries) AddNewBook(ctx context.Context, arg AddNewBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, addNewBook,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.Description,
		arg.Author,
		arg.BookCover,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.Description,
		&i.Author,
		&i.BookCover,
	)
	return i, err
}

const deleteBookByID = `-- name: DeleteBookByID :one
DELETE FROM books WHERE id=$1
RETURNING id, created_at, updated_at, name, url, description, author, book_cover
`

func (q *Queries) DeleteBookByID(ctx context.Context, id uuid.UUID) (Book, error) {
	row := q.db.QueryRowContext(ctx, deleteBookByID, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.Description,
		&i.Author,
		&i.BookCover,
	)
	return i, err
}

const getAllBooks = `-- name: GetAllBooks :many
SELECT id, created_at, updated_at, name, url, description, author, book_cover FROM books
`

func (q *Queries) GetAllBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getAllBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.Description,
			&i.Author,
			&i.BookCover,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookById = `-- name: GetBookById :one
SELECT id, created_at, updated_at, name, url, description, author, book_cover FROM books WHERE id=$1
`

func (q *Queries) GetBookById(ctx context.Context, id uuid.UUID) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBookById, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.Description,
		&i.Author,
		&i.BookCover,
	)
	return i, err
}
